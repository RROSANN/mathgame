{"version":3,"sources":["components/ScoreBox/ScoreBox.js","components/Correct/Correct.js","components/TryAgain/TryAgain.js","components/QuestionBox/QuestionBox.js","components/InformationBox/InformationBox.js","components/Choices/Choices.js","components/StartButton/StartButton.js","components/GameOver/GameOver.js","components/TimeRemaining/TimeRemaining.js","components/ResetButton/ResetButton.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreTop","score","className","Correct","TryAgain","QuestionBox","InformationBox","Choices","StartButton","start","startReset","displayStart","onClick","style","display","GameOver","props","state","showResult","this","React","Component","TimeRemaining","tick","bind","playing","seconds","timer","setInterval","setState","clearInterval","displayTime","ResetButton","refreshPage","window","location","reload","displayReset","App","event","startCountDown","timeLeft","timeLeftValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a5cb86a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ScoreBox.css';\r\n \r\nconst ScoreTop = ({ score }) => {\r\n\treturn (\r\n\t\t<div className=\"flex justify-between\">\r\n\t\t  <div className=\" w-15 \">\r\n\t\t  </div>\r\n\t\t  <div className=\"w-15\">\r\n\t\t  </div>\r\n\t\t  <div className=\" score w-15\">\r\n\t\t\tScore: {score}\r\n\t\t  </div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ScoreTop;","import React from 'react';\r\nimport './Correct.css';\r\n\r\nconst Correct = () => {\r\n\treturn (\r\n\t\t<div className=\"correct\">\r\n\t\t\tCorrect\r\n\t\t </div>\r\n\t);\r\n}\r\n\r\nexport default Correct;","import React from 'react';\r\nimport './TryAgain.css';\r\n\r\nconst TryAgain = () => {\r\n\treturn (\r\n\t\t<div className=\"wrong\">\r\n\t\t\tTry again\r\n\t\t </div>\r\n\t);\r\n}\r\n\r\nexport default TryAgain;","import React from 'react';\r\nimport './QuestionBox.css';\r\n\r\nconst QuestionBox = () => {\r\n\treturn (\r\n\t\t<div className=\"question\">\r\n\t\t\t7x9\r\n\t\t </div>\r\n\t);\r\n}\r\n\r\nexport default QuestionBox;","import React from 'react';\r\nimport './InformationBox.css';\r\n\r\nconst InformationBox = () => {\r\n\treturn (\r\n\t\t<div className=\"info\">\r\n\t\t\tClick on the correct answer\r\n\t\t </div>\r\n\t);\r\n}\r\n\r\nexport default InformationBox;","import React from 'react';\r\nimport './Choices.css';\r\n\r\nconst Choices = () => {\r\n\treturn (\r\n\t\t<div className=\"flex choices\">\r\n\t\t  <div className=\"box grow \">\r\n\t\t    <code>1</code>\r\n\t\t  </div>\r\n\t\t  <div className=\"box grow\">\r\n\t\t    <code>2</code>\r\n\t\t  </div>\r\n\t\t  <div className=\"box grow\">\r\n\t\t    <code>3</code>\r\n\t\t  </div>\r\n\t\t  <div className=\" box box4 grow\">\r\n\t\t    <code>4</code>\r\n\t\t  </div>\r\n\t\t </div>\r\n\t);\r\n}\r\n\r\nexport default Choices;","import React from 'react';\r\nimport './StartButton.css';\r\n\r\nconst StartButton = ({start, startReset, displayStart}) => {\r\n\treturn (\r\n\t\t<div onClick={start} style={{ display: (displayStart === true) ? \"block\" : \"none\" }}className=\"start grow\">\r\n\t\t\t{startReset}\r\n\t\t </div> \r\n\t);\r\n}\r\n\r\nexport default StartButton;\r\n\r\n","import React from 'react';\r\nimport './GameOver.css';\r\n\r\n\r\nclass GameOver extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tscore: this.props.score,\r\n\t\t\tshowResult: this.props.showResult\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div style={{ display: (this.props.showResult === true) ? \"block\" : \"none\" }}className=\"endgame\">\r\n\t\t\t\t<p>Game Over</p>\r\n\t\t\t\t<p>Your score is {this.state.score}</p>\r\n\t\t\t </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default GameOver;","import React from 'react';\r\nimport  GameOver from '../GameOver/GameOver';\r\nimport './TimeRemaining.css';\r\n\t\r\n\r\nclass TimeRemaining extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.tick = this.tick.bind(this)\r\n\t\tthis.state = {\r\n\t\t\tplaying: this.props.playing,\r\n\t\t\tscore: this.props.score,\r\n\t\t\tseconds: 5,\r\n\t\t\tshowResult: false,\r\n\t\t}\r\n\t}\r\n\r\n  componentDidMount(){\r\n\t    this.timer = setInterval(this.tick, 1000);\r\n\t  }\r\n\r\n\t  tick(){\r\n\t    if (this.state.seconds > 0) {\r\n\t      this.setState({seconds: this.state.seconds - 1})\r\n\t    } else {\r\n\t      clearInterval(this.timer);\r\n\t      this.setState({\r\n\t      \tshowResult: true\r\n\t      })\r\n\t    }\r\n  \t}\r\n\r\n\trender(){\t\t\r\n\t\treturn (\r\n\t\t\t<div style={{ display: (this.props.displayTime === true) ? \"block\" : \"none\" }} className=\"time\">\r\n\t\t\t\tTime remaining: {this.state.seconds} sec\r\n\t\t\t\t<GameOver score={this.state.score} showResult={this.state.showResult}/>\t\r\n\t\t\t </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TimeRemaining;","import React from 'react';\r\nimport './ResetButton.css';\r\n\r\nclass ResetButton extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\t\r\n\t\t}\r\n\t}\r\n\t refreshPage = () => {\r\n\t   window.location.reload(true);\r\n\t  }\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div   onClick={this.refreshPage} style={{ display: (this.props.displayReset === true) ? \"block\" : \"none\" }}className=\"reset grow\">\r\n\t\t\t\tReset Game\r\n\t\t\t </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ResetButton;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'tachyons';\nimport ScoreBox from './components/ScoreBox/ScoreBox';\nimport Correct from './components/Correct/Correct';\nimport TryAgain from './components/TryAgain/TryAgain';\nimport QuestionBox from './components/QuestionBox/QuestionBox';\nimport InformationBox from './components/InformationBox/InformationBox';\nimport Choices from './components/Choices/Choices';\nimport StartButton from './components/StartButton/StartButton';\nimport TimeRemaining from './components/TimeRemaining/TimeRemaining';\nimport ResetButton from './components/ResetButton/ResetButton';\n\n// if click start/reset button\n  //if game is on \n    //reload page \n  //if not game on \n    //set score to 0\n    //show show time remaining box\n    //reduce time by 1sec \n      //check if time is left \n        //yes - continue & drop 1sec\n        //no - show gameover\n    //change start button to reset game button\n    //generate question and answers\n\n\n//if click answer box\n  //if we are playing \n    //if correct\n      //correct\n        //increase score\n        //show correct box for 1 sec\n        //generate new question and answers\n      //wrong\n        //try again box\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playing: false,\n      score: '',\n      displayTime: false,\n      startReset: \"Start Game\",\n      displayReset: false,\n      displayStart: true\n  }\n}\n\n\n  // if click start/reset button\n  start = (event, playing, score, refreshPage, startCountDown, timeLeft, timeLeftValue) => {\n    //if game is on \n    if(playing === true){\n      //reload page not working, was supposed to go and take from server..but done a new button and fixed that.\n      window.location.reload();\n    }else{ //if game not on\n      this.setState({\n        playing: true,\n        score: 0,     //set score to 0\n        displayTime: true,  //show show time remaining box\n        startReset: \"Start Game\",\n        displayReset: true,\n        displayStart: false    //change start button to reset game button\n      })      \n    }\n\n  }\n\n  render() {\n    const { timeLeftValue, playing } = this.state; \n    return (\n        <div  className='container'>\n          <ScoreBox score={this.state.score}/>\n          <Correct />\n          <TryAgain />\n          <QuestionBox />\n          <InformationBox />\n          <Choices />\n          <StartButton start={this.start} startReset = {this.state.startReset} displayStart = {this.state.displayStart}/>\n          <ResetButton refreshPage={this.refreshPage} displayReset = {this.state.displayReset}/>\n          <TimeRemaining displayTime = {this.state.displayTime} timeLeftValue = {timeLeftValue} playing = {playing}/>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}